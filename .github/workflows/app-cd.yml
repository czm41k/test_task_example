---
name: '3-App: Deploy with helm'
on:
  workflow_run:
    workflows: ["2-App: Check, build and upload artifact"]
    types: ["completed"]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Image tag'
        required: true
        type: string

env:
  REPO: "617686195573.dkr.ecr.us-west-1.amazonaws.com/czm41k-python-webserver-dev"
  AWS_REGION: "us-west-1"
  BUCKET_NAME: "czm41k-terraform-state"

jobs:
  deploy:
    runs-on: 'ubuntu-latest'
    if: ${{ github.event.workflow_run.conclusion == 'success' }} or ${{ inputs.tag }}
    steps:
    - name: Configure aws-cli
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: ${{ env.AWS_REGION }}
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
    - name: Generate kubeconfig with aws-cli
      run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name czm41k-eks-dev
    - name: Checkout repo
      uses: actions/checkout@v1
    - name: install helm3
      uses: azure/setup-helm@v3
      with:
        version: '3.9.4'
    - name: Set tag
      env:
        MANUAL_TAG: ${{ inputs.tag }}
      run: |
        if [[ $MANUAL_TAG ]]
        then
          echo "TAG=${{ inputs.tag }}" >> $GITHUB_ENV
        else
          echo "TAG=${GITHUB_REF_NAME}" >> $GITHUB_ENV
        fi
        echo ${{ env.TAG }}
    - name: install app with helm --dry-run
      working-directory: helm-charts/python-webserver/
      run: helm upgrade python-webserver . --install --wait --atomic --dry-run --create-namespace --namespace=app --timeout=5m --set image.repository=${{ env.REPO }} --set image.tag=${{ env.TAG }}
    - name: Approve before deploy
      uses: trstringer/manual-approval@main
      with:
        secret: ${{ github.TOKEN }}
        approvers: czm41k

    - name: install app with helm
      working-directory: helm-charts/python-webserver/
      run: helm upgrade python-webserver . --install --wait --atomic --create-namespace --namespace=app --timeout=5m --set image.repository=${{ env.REPO }} --set image.tag=${{ env.TAG }}
...
